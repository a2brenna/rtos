Logging: Pending
    Log all incoming traffic in order *before* servicing requests.  Expensive
way to provide journalling, complete point in time restore and debug
information. Timestamp and roll logs.

Fixed Width Protocol: Pending
    Use a hand rolled fixed width versioned protocol for performance reasons.
Should be able to mostly avoid runtime memory allocation / freeing.

Wire Protocol: Pending
    Capnproto based wire protocol for accessing remote Object Store that exposes
a superset of reference implementation (FS_Store).  Allows drop in replacement
of local Object Store with a remote Object Store.

Performance Tracking: Pending
    Log timing/metadata information for all requests to underlying storage and
for all incoming requests.

Object Metadata: Pending
    Allow clients to retrieve Object size/ctime/mtime/atime etc. Either use
underlying storage (posix fs) or track this independantly.

Multi-Op Support: Pending
    Support for executing multiple standard operations at a time.  Wire protocol
should send them all at once and receive return codes/exception information for
them all at once.

Transaction Support: Pending
    Multi-Ops that succeed or fail atomically.

Server Side Copy: Pending
    Command for creating a copy of an Object addressed by a new key.  Exploit
underlying storage's ability to do COW (btrfs etc.) to make this operation as
fast as possible, but fallback to creating full copies.

Evolve/Mutate: Pending
    Exploit Server Side Copy implementation to allow a client to atomically copy
an Object and then perform a mutation before returning.

Automatic Width/Depth Detection: Pending
    Given a directory and no Depth/Width parameters, daemon should explore
directory tree at start time to discover its depth and width.

Per Object Journal: Investigate
    Investigate having a per object journal. Might allow for point in time
recovery of arbitrary objects.
